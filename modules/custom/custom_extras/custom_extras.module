<?php
use Drupal\node\NodeInterface;
use Drupal\user\Entity\User;
use Drupal\Core\Form\FormStateInterface;
use Drupal\node\Entity\Node;
use Drupal\taxonomy\Entity\Term;
use Drupal\paragraphs\Entity\Paragraph;
use Drupal\Core\Ajax\AjaxResponse;
use Drupal\Core\Ajax\CloseModalDialogCommand;
use Drupal\Core\Ajax\RedirectCommand;
use Drupal\Core\Ajax\InvokeCommand;
use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
use Drupal\Core\Entity\EntityInterface;
use Drush\Drush;

/**
 * Implements hook_cloned_node_alter().
 */
function custom_extras_cloned_node_alter(&$node){
  $node->get('field_cloned')->setValue([TRUE]);
}

/**
 * Implements hook_ENTITY_TYPE_insert().
 */
function custom_extras_node_insert(Node $node) {
  if ($node->get('field_cloned')->value) {
    $lti_provision = \Drupal::entityTypeManager()->getStorage('lti_tool_provider_provision')->create([
      'consumer_id' => $node->get('field_consumer_id')->value,
      'context_id' => $node->get('field_context_id')->value,
      'context_label' => $node->get('field_context_label')->value,
      'context_title' => $node->get('field_context_title')->value,
      'resource_link_id' => $node->get('field_resource_link_id')->value,
      'resource_link_title' => $node->get('field_context_title')->value,
      'provision_type' => 'node',
      'provision_bundle' => 'class_page',
      'provision_id' => $node->id(),
    ]);
    $lti_provision->save();
  }
}

/**
 * Implements hook_editor_js_settings_alter().
 */
function custom_extras_editor_js_settings_alter(array &$settings) {
  foreach (array_keys($settings['editor']['formats']) as $text_format_id) {
    if ($text_format_id === 'basic_html') {
      $settings['editor']['formats'][$text_format_id]['editorSettings']['autoGrow_minHeight'] = '75';
    }
  }
}

/**
 * Implements hook_node_view().
 */
function custom_extras_node_view(array &$build, NodeInterface $node, EntityViewDisplayInterface $display, $view_mode) {
  $bundle = $node->bundle();
  if ($bundle == 'class_page') {
    $empty = TRUE;
    $visible_fields = array_keys($display->getComponents());
    // field_announcements is hidden in entity view. Rendered as block.
    $visible_fields[] = 'field_announcements';
    foreach ($node->getFields() as $key => $field) {
      $name = $field->getName();
      if (substr($name, 0, 6) === "field_" && !empty($field->getValue()) && in_array($name, $visible_fields)) {
        $empty = FALSE;
      }
    }
    if ($empty) {
      $user = \Drupal::currentUser();
      $build['#cache']['max-age'] = 0;
      if ($user->hasPermission('edit any '.$bundle.' content')) {
        \Drupal::messenger()->addStatus(t('Welcome! Select the Edit tab to add appropriate library tools in order to share course-specific information (specialists, guides, resource links, course reserves, videos) with your students. Need help? Contact <a href="mailto:Scholarspace@umich.edu">Scholarspace@umich.edu</a> or your U-M Library <a href="https://www.lib.umich.edu/research-and-scholarship/help-research/find-specialist" target="_blank">Subject Specialist</a>.'), TRUE);
      }
      else if ($user->hasPermission('view any '.$bundle.' content')) {
        \Drupal::messenger()->addError(t('Your instructor hasn’t added any course-specific library information yet. You can use Ask a Librarian to contact a library specialist.'), TRUE);
      }
    }
  }
}

function custom_extras_preprocess_node__class_page(array &$variables) : void {
  //Module name: 'mymodule', library name: 'mymodule'.
  $variables['#attached']['library'][] = 'custom_extras/custom_extras';
}

function custom_extras_local_tasks_alter(&$local_tasks) {
  unset($local_tasks['user.pass']);
  unset($local_tasks['user.register']);
}

function custom_extras_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  if (in_array($form_id, ['user_register_form', 'user_pass'])) {
    foreach ($form as $key => $value) {
      if (in_array($key, ['#attributes', '#cache', 'name', 'actions', 'administer_users', 'account', 'language', 'timezone', 'user_picture', 'contact'])) {
        unset($form[$key]);
      }
    }
  }
  if ($form_id == 'media_library_add_form_oembed') {
    unset($form['actions']['save_select']);
    $form['actions']['save_insert']['#button_type'] = 'primary';
  }
  if ($form_id == 'taxonomy_term_resources_form') {
    $form['actions']['submit']['#submit'][] = '_modal_form_ajax_submit';
    $form['actions']['submit']['#attributes']['class'][] = 'use-ajax-submit';
  }
  if (in_array($form_id, ['node_class_page_edit_form','node_class_page_form'])) {
    $form['title']['widget'][0]['value']['#field_prefix'] = '<span class="field-prefix"><div class="extra-description">The title field is automatically populated with the course name. You can change it to represent the purpose of the tool for this course.</div></span>';
    $can_edit = _custom_extras_is_admin();
    if (empty($can_edit)) {
      $form['field_consumer_id']['#access'] = FALSE;
      $form['field_context_id']['#access'] = FALSE;
      $form['field_context_title']['#access'] = FALSE;
      $form['field_context_label']['#access'] = FALSE;
      $form['field_context_labels_titles']['#access'] = FALSE;
      $form['field_resource_link_id']['#access'] = FALSE;
    }
  }
  $form['#attributes']['target'] = '_self';
  $form['actions']['preview']['#access'] = FALSE;
}

function _modal_form_ajax_submit(array $form, FormStateInterface &$form_state) {
  $tid = $form_state->getValue('tid');
  $term = Term::load($tid);
  $value = $term->getName() . ' (' . $tid . ')';
  $response = new AjaxResponse();
  $response->addCommand(new CloseModalDialogCommand());
  #$response->addCommand(new InvokeCommand('#edit-field-blocks-0-subform-field-recommended-resources-0-target-id', 'val', [$value]));
  $response->addCommand(new InvokeCommand('#field-recommended-resources-values input:last', 'val', [$value]));
  $form_state->setResponse($response);
}

/**
 * Implements hook_node_presave().
 */
function custom_extras_node_presave(NodeInterface $node) {
  if ($node->bundle() == 'class_page') {
    $context_label = $node->get('field_context_label')->value;
    $context_title = $node->get('field_context_title')->value;
    if (empty($node->getTitle())) {
      $node->setTitle($context_title);
    }
    $context_labels_titles = $node->get('field_context_labels_titles')->getValue();
    $context_label_title_history = [];
    foreach ($context_labels_titles as $context_label_title) {
      $context_label_title_history[] = $context_label_title['value'];
    }
    if (empty($context_label_title_history)) {
      $context_label_title_history = array_unique([$context_label, $context_title]);
      $node->get('field_context_labels_titles')->setValue($context_label_title_history);
    }
    else {
      if (!in_array($context_label, $context_label_title_history)) {
        $node->get('field_context_labels_titles')->appendItem($context_label);
        $context_label_title_history[] = $context_label;
      }
      if (!in_array($context_title, $context_label_title_history) && $context_title != $context_label) {
        $node->get('field_context_labels_titles')->appendItem($context_title);
        $context_label_title_history[] = $context_title;
      }
    }
    $has_blocks = $node->get('field_blocks')->getValue();
    if (!empty($has_blocks)) {
      foreach ($has_blocks as $key => $block) {
        $paragraph = Paragraph::load($block['target_id']);
        switch ($paragraph->bundle()) {
          case 'embedded_research_guide':
            $guide_id = $paragraph->get('field_research_guide')->target_id;
            $term = Term::load($guide_id);
            $guide = $term->get('field_url')->getValue();
            $url = $guide[0]['uri'];
            $e_guide[0]['url'] = $url;
            // might need the title - $e_guide[0]['title'] = $term->getName();
            $e_guide[0]['height'] = '750';
            $paragraph->get('field_embedded_research_guide')->setValue($e_guide);
            $paragraph->save();
            break;
          case 'course_reserves':
            $has_value = $paragraph->get('field_course_reserves')->value;
            $reserves = _custom_extras_get_reserves($context_label_title_history, $has_value, $node->id());
            if ($reserves != 'error') {
              $paragraph->get('field_course_reserves')->setValue($reserves);
              $paragraph->save();
            }
            break;
          case 'library_hours':
            $hours = $paragraph->get('field_library_hours')->getValue();
            $buildings = $paragraph->get('field_building_hours_to_display')->getValue();
            $h_url = '';
            if (!empty($buildings)) {
              $h_url = 'https://cms.lib.umich.edu/widgets/hours/';
            }
            foreach ($buildings as $building) {
              $h_url = $h_url . $building['value'] . '+';
            }
            $h_url = trim($h_url,'+');
            $hours[0]['url'] = $h_url;
            // we need to be explicit on height. mod default is 701
            $hours[0]['height'] = count($buildings) * 70;
            $paragraph->get('field_library_hours')->setValue($hours);
            $paragraph->save();
            break;
          case 'course_specialist':
            $specialist_id = $paragraph->get('field_course_specialist')->value;
            $s_url = '';
            if (!empty($specialist_id)) {
              $s_url = 'https://cms.lib.umich.edu/widgets/specialist/'.$specialist_id;
            }
            $specialist[0]['url'] = $s_url;
            $specialists = explode('+', $specialist_id);
            $specialist[0]['height'] = count($specialists) * 105 + 10;
            $paragraph->get('field_course_specialist_display')->setValue($specialist);
            $paragraph->save();
            break;
          case 'library_specialists':
            $specialists = $paragraph->get('field_library_specialists')->getValue();
            $spec_to_show = $paragraph->get('field_specialists_to_show')->getValue();
            $s_url = '';
            $s_url_count = '';
            if (!empty($spec_to_show)) {
              $s_url = 'https://cms.lib.umich.edu/widgets/specialists';
              $s_url_count = $s_url . '/count';
            }
            $vocabs = [
              'academic_discipline' => [],
              'collecting_areas'    => [],
              'health_sciences'     => [],
              'library_expertise'   => [],
            ];
            foreach ($spec_to_show as $spec) {
              $term = Term::load($spec['target_id']);
              $bundle = $term->bundle();
              $vocabs[$bundle][] = $spec['target_id'];
            }
            foreach ($vocabs as $vocab) {
              $s_url = $s_url . '/';
              $s_url_count = $s_url_count . '/';
              if (!empty($vocab)) {
                foreach ($vocab as $term) {
                  $s_url = $s_url . $term . '+';
                  $s_url_count = $s_url_count . $term . '+';
                }
                $s_url = trim($s_url,'+');
                $s_url_count = trim($s_url_count,'+');
              }
              else {
                $s_url = $s_url . '0';
                $s_url_count = $s_url_count . '0';
              }
            }
            $data = _custom_extras_encoding(file_get_contents($s_url_count));
            $specialists[0]['url'] = $s_url;
            // we need to be explicit on height. mod default is 701
            if (is_countable($data)) {
              $specialists[0]['height'] = count($data) * 105 + 10;
            }
            else {
              // No specialists found.
              $specialists[0]['height'] = 105;
            }
            $paragraph->get('field_library_specialists')->setValue($specialists);
            $paragraph->save();
            break;
        }
        $node->get('field_blocks')->appendItem([$key => $paragraph]);
      }
    }
  }
  /* we arent using this atm
  if ($node->bundle() == 'page') {
    $type_of_page = $node->get('field_type_of_page')->value;
    $show_reserves = $node->get('field_show_course_reserves')->value;
    if ($type_of_page == 'multiple') {
      $hours = $node->get('field_library_hours')->getValue();
      $buildings = $node->get('field_building_hours_to_display')->getValue();
      $h_url = '';
      if (!empty($buildings)) {
        $h_url = 'https://cms.lib.umich.edu/widgets/hours/';
      }
      foreach ($buildings as $building) {
        $h_url = $h_url . $building['value'] . '+';
      }
      $h_url = trim($h_url,'+');
      $hours[0]['url'] = $h_url;
      // we need to be explicit on height. mod default is 701
      $hours[0]['height'] = '350';
      $node->get('field_library_hours')->setValue($hours);

      $specialists = $node->get('field_library_specialists')->getValue();
      $spec_to_show = $node->get('field_specialists_to_show')->getValue();
      $s_url = '';
      if (!empty($spec_to_show)) {
        $s_url = 'https://cms.lib.umich.edu/widgets/specialists';
      }
      $vocabs = [
        'academic_discipline' => [],
        'collecting_areas'    => [],
        'health_sciences'     => [],
        'library_expertise'   => [],
      ];
      foreach ($spec_to_show as $spec) {
        $term = Term::load($spec['target_id']);
        $bundle = $term->bundle();
        $vocabs[$bundle][] = $spec['target_id'];
      }
      foreach ($vocabs as $vocab) {
        $s_url = $s_url . '/';
        foreach ($vocab as $term) {
          $s_url = $s_url . $term . '+';
        }
        $s_url = trim($s_url,'+');
      }
      $specialists[0]['url'] = $s_url;
      // we need to be explicit on height. mod default is 701
      $specialists[0]['height'] = count($spec_to_show) * 100;
      $node->get('field_library_specialists')->setValue($specialists);

      $node->get('field_embedded_research_guide')->setValue([]);
      $node->get('field_research_guide')->setValue([]);
      $node->get('field_course_reserves_full')->setValue([]);

      if ($show_reserves) {
        $reserves = _custom_extras_get_reserves($node->get('field_context_label')->value);
        $node->get('field_course_reserves')->setValue($reserves);
      }
      else {
        $node->get('field_course_reserves')->setValue([]);
      }
    }
    elseif ($type_of_page == 'guide_only') {
      $e_guide = $node->get('field_embedded_research_guide')->getValue();
      $guide = $node->get('field_research_guide')->getValue();
      $url = $guide[0]['uri'];
      $e_guide[0]['url'] = $url;
      $e_guide[0]['height'] = '750';
      $node->get('field_embedded_research_guide')->setValue($e_guide);
      $node->get('field_library_specialists')->setValue([]);
      $node->get('field_library_hours')->setValue([]);
      $node->get('field_specialists_to_show')->setValue([]);
      $node->get('field_building_hours_to_display')->setValue([]);
      $node->get('field_research_guides')->setValue([]);
      $node->get('field_instructional_video')->setValue([]);
      $node->get('field_recommended_resources')->setValue([]);
      $node->get('field_course_reserves')->setValue([]);

      if ($show_reserves) {
        $reserves = _custom_extras_get_reserves($node->get('field_context_label')->value);
        $node->get('field_course_reserves_full')->setValue($reserves);
      }
      else {
        $node->get('field_course_reserves_full')->setValue([]);
      }
    }
    elseif ($type_of_page == 'reserves_only') {
      $reserves = _custom_extras_get_reserves($node->get('field_context_label')->value);
      $node->get('field_course_reserves_full')->setValue($reserves);
      $node->get('field_show_course_reserves')->setValue(['value' => TRUE]);
    }
  }*/
}

function _custom_extras_is_admin() {
  $can_edit_roles = array('administrator', 'administrator1', 'admin_light');
  $can_edit = array_intersect(\Drupal::currentUser()->getRoles(), $can_edit_roles);
  return $can_edit;
}

function _custom_extras_get_reserves($context_label_title_history, $has_value = NULL, $nid = NULL) {
  $api_key = \Drupal::config('custom_extras.settings')->get('custom_reserves_key');
  $context_label_title_history =array_filter($context_label_title_history);
  $q = implode(',OR;', array_map(function($str) {
    return "course_code,contains," . rawurlencode($str);
  }, $context_label_title_history));
  $search_url = "https://api-na.hosted.exlibrisgroup.com/primo/v1/search?vid=01UMICH_INST:UMICH&tab=CourseReserves&scope=CourseReserves&limit=250&sort=title&apikey={$api_key}&q={$q}";
  $response = json_decode(file_get_contents($search_url));
  if ($response->info->total == 0 && $has_value) {
    $year = date('Y');
    $is_current_semester = FALSE;
    foreach ($context_label_title_history as $label_title) {
      if (strpos($label_title, $year) !== false) {
        $month = idate('m');
        $semesters = [
          'FA' => [8,9,10,11,12],
          'WN' => [1,2,3,4,5],
          'SS' => [5,6,7,8],
          'SP' => [5,6],
          'SU' => [6,7,8],
        ];
        foreach ($semesters as $semester => $months) {
          if (strpos($label_title, $semester) !== false  && in_array($month, $semesters[$semester])) {
            $is_current_semester = TRUE;
          }
        }
      }
    }
    if ($is_current_semester) {
      if (!is_numeric($has_value)) {
        $has_value = 0;
      }
      $has_value++;
      if ($has_value < 4) {
        _custom_extras_get_reserves($context_label_title_history, $has_value, $nid);
      }
      else {
        $context_title = str_replace(' ', '_', end($context_label_title_history));
        $alma_check_url = "https://api-na.hosted.exlibrisgroup.com/almaws/v1/courses?q=code~{$context_title}&limit=10&offset=0&order_by=code%2Csection&direction=ASC&exact_search=false&apikey={$api_key}&format=json";
        $alma_response = json_decode(file_get_contents($alma_check_url));
        if ($alma_response->total_record_count > 0 && $alma_response->course[0]->status != 'INACTIVE') {
          custom_uml_mail_send_mail('eliotwsc@umich.edu', 'eliotwsc@umich.edu', 'No response from primo on node id '.$nid.' after 4 tries to query '.$q, $context_label_title_history, 'primo error');
        }
      }
    }

    return 'error';
  }
  $markup = '';
  if ($response->info->total > 0) {
    $markup .= '<p>If an item is listed as “unavailable” it may be checked out. Find it in <a href="https://search.lib.umich.edu/catalog">Library Catalog Search</a> for more information or contact Ask a Librarian for help.</p><ul id="reserves">';
    foreach ($response->docs as $key => $doc) {
      $item_number = $key + 1;
      $title = $doc->pnx->display->title[0];
      if (isset($doc->pnx->display->edition[0]) && !empty($doc->pnx->display->edition[0])) {
        $edition = trim($doc->pnx->display->edition[0], '.');
        $title .= ' ('.$edition.')';
      }
      $mmsid = $doc->pnx->display->mms[0];
      $markup .= "<li><strong>".$title."</strong>";
      $author = '';
      if (!empty($doc->pnx->display->creator) && count($doc->pnx->display->creator) > 0) {
        $author = '<div class="reserves-author"><strong>Author</strong><br/>';
        foreach ($doc->pnx->display->creator as $creator) {
          $author .= explode('$$', $creator)[0].'<br/>';
        }
      }
      if (!empty($doc->pnx->display->contributor) && count($doc->pnx->display->contributor) > 0) {
        if (empty($author)) {
          $author = '<div class="reserves-author"><strong>Author</strong><br/>';
        }
        foreach ($doc->pnx->display->contributor as $contributor) {
          $author .= explode('$$', $contributor)[0].'<br/>';
        }
      }
      if (!empty($author)) {
        $markup .= $author.'</div>';
      }
      if ((!empty($doc->delivery->holding) && count($doc->delivery->holding) > 0) || (!empty($doc->delivery->link) && count($doc->delivery->link) > 0)) {
        $markup .= '<div class="reserves-location"><strong>Location</strong><br/>';
        $location = '';
        if (!empty($doc->delivery->holding)) {
          foreach ($doc->delivery->holding as $holding) {
            $status = $holding->availabilityStatus;
            if ($holding->availabilityStatus == 'available') {
              $status = "<span class='available'>".$holding->availabilityStatus."</span>";
            }
            if ($holding->availabilityStatus == 'unavailable') {
              $status = "<span class='unavailable'>".$holding->availabilityStatus."</span>";
            }
            $location .= $status." ".$holding->mainLocation." ".$holding->subLocation.": ".$holding->callNumber."<br/>";
          }
        }
        if (in_array('Alma-E', $doc->delivery->deliveryCategory)) {
          $location .= "Available Online: <a href='https://mgetit.lib.umich.edu/resolve?u.ignore_date_coverage=true&rft.mms_id={$mmsid}' target='_blank'>MGetIt</a><br/>";
        }
        $markup .= $location.'</div>';
      }
      $markup .= "</li>";
    }
    $markup .= "</ul>";
    if (count($response->docs) > 10) {
      $markup .= "<span id='reserves-more'>show all ".count($response->docs)." reserves</span>";
      $markup .= "<span id='reserves-less'>show fewer reserves</span>";
    }
  }
  else {
    $markup = '<p>Instructors can place materials on course reserves, but nothing was found for this course.</p>';
  }
  $reserves[0]['value'] = $markup;
  $reserves[0]['format'] = 'full_html';
  $reserves[0]['_attributes'] = [];
  return $reserves;
}

//verify data encoding and decode
function _custom_extras_encoding($data) {
  $encoding = mb_detect_encoding($data, 'UTF-8', true);
  if ($encoding) {
    $user_data = mb_convert_encoding($data, 'UTF-8', $encoding);
  }
  return json_decode($data);
}

//update reserves
function _custom_reserves() {
  Drush::output()->writeln('Updating reserves...');
  $query = \Drupal::entityQuery('paragraph')
    ->condition('type', 'course_reserves');
  $reserves = $query->execute();
  $updated = [];
  foreach ($reserves as $reserve) {
    $paragraph = Paragraph::load($reserve);
    $node = $paragraph->getParentEntity();
    if (!in_array($node->id(), $updated)) {
      Drush::output()->writeln('Saving node id '.$node->id().' with reserve id '.$paragraph->id());
      $node->save();
      $updated[] = $node->id();
    }
    else {
      Drush::output()->writeln('Skipping reserve id '.$paragraph->id().' because its parent node id '.$node->id().' was saved already.');
    }
  }
  drupal_flush_all_caches();
/*
  $message = array();
  foreach ($errors as $error) {
    Drush::output()->writeln($error);
    $message[] = \Drupal\Core\Render\Markup::create('<p>'.$error.'</p>');
  }
  foreach ($the_databases as $the_database) {
    Drush::output()->writeln($the_database);
    $updated[] = \Drupal\Core\Render\Markup::create('<p>'.$the_database.'</p>');
  }
  custom_uml_mail_send_mail('eliotwsc@umich.edu', $reply_to, 'database errors', $message, 'custom_databases_errors');
  custom_uml_mail_send_mail('eliotwsc@umich.edu', $reply_to, 'database updated', $updated, 'custom_databases_updated');
*/
}
